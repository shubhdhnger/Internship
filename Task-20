Task:  20
1. Currency Converter:
Create a class CurrencyConverter that utilizes Java's BigDecimal wrapper class for precise currency calculations.
Define exchange rates: Store exchange rates for a few currencies (e.g., USD, EUR, GBP) within the class (you can use static final BigDecimal fields for this).
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

public class CurrencyConverter {
    private static final Map<String, BigDecimal> exchangeRates = new HashMap<>();

    static {
        exchangeRates.put("USD", BigDecimal.ONE); // Base currency
        exchangeRates.put("EUR", new BigDecimal("0.92")); // Example rate
        exchangeRates.put("GBP", new BigDecimal("0.79")); // Example rate
    }

    public static BigDecimal convert(BigDecimal amount, String fromCurrency, String toCurrency) {
        if (!exchangeRates.containsKey(fromCurrency) || !exchangeRates.containsKey(toCurrency)) {
            throw new IllegalArgumentException("Unsupported currency");
        }
        
        BigDecimal fromRate = exchangeRates.get(fromCurrency);
        BigDecimal toRate = exchangeRates.get(toCurrency);
        
        return amount.multiply(toRate).divide(fromRate, 4, BigDecimal.ROUND_HALF_UP);
    }

    public static void main(String[] args) {
        BigDecimal amount = new BigDecimal("100");
        System.out.println("100 USD to EUR: " + convert(amount, "USD", "EUR"));
        System.out.println("100 EUR to GBP: " + convert(amount, "EUR", "GBP"));
    }
}
2. Immutable Class: Person
Create an immutable class Person to represent a person with the following attributes:

firstName (String)
lastName (String)
dateOfBirth (LocalDate)
Make the class immutable:

Declare all fields as final.
Use a constructor to initialize all fields.
Do not provide any setter methods.
Implement the following methods:

String getFullName(): Returns the full name of the person (e.g., "John Doe").
int getAge(): Calculates and returns the current age of the person based on the dateOfBirth.
import java.time.LocalDate;
import java.time.Period;

public final class Person {
    private final String firstName;
    private final String lastName;
    private final LocalDate dateOfBirth;

    public Person(String firstName, String lastName, LocalDate dateOfBirth) {
        if (firstName == null || lastName == null || dateOfBirth == null) {
            throw new IllegalArgumentException("Fields cannot be null");
        }
        this.firstName = firstName;
        this.lastName = lastName;
        this.dateOfBirth = dateOfBirth;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public LocalDate getDateOfBirth() {
        return dateOfBirth;
    }

    public String getFullName() {
        return firstName + " " + lastName;
    }

    public int getAge() {
        return Period.between(dateOfBirth, LocalDate.now()).getYears();
    }

    @Override
    public String toString() {
        return "Person{" +
                "firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", dateOfBirth=" + dateOfBirth +
                '}';
    }
}

